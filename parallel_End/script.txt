/* vim: set syntax=magma : */
/*
    rm ~/IsomClassesAbVarFqComEnd/parallel_End/output.txt
    rm ~/IsomClassesAbVarFqComEnd/parallel_End/errors.txt
    rm ~/IsomClassesAbVarFqComEnd/parallel_End/joblog
    parallel -j 15 --timeout 3600 --resume --joblog ~/IsomClassesAbVarFqComEnd/parallel_End/joblog -a ~/IsomClassesAbVarFqComEnd/parallel_End/input.txt magma -b cc:={} ~/IsomClassesAbVarFqComEnd/parallel_End/script.txt 
*/

    file_out:="~/IsomClassesAbVarFqComEnd/parallel_End/output.txt";
    file_err:="~/IsomClassesAbVarFqComEnd/parallel_End/errors.txt";

    AttachSpec("~/AlgEt/spec");
    Attach("~/IsomClassesAbVarFqComEnd/PrimesAttributes.m");
    Attach("~/IsomClassesAbVarFqComEnd/DieudonneModules.m");
    Attach("~/IsomClassesAbVarFqComEnd/IsomorphismClasses.m");

    //SetVerbose("DieudonneModules",2);
    SetAssertions(2);
    SetDebugOnError(false);
    SetClassGroupBounds("GRH");

    PP<x>:=PolynomialRing(Integers());

    coeff:=eval(cc);
    h:=PP!coeff;
    g:=Degree(h) div 2;
    q:=Truncate(ConstantCoefficient(h)^(1/g));
    t,p,a:=IsPrimePower(q);
    assert t; delete t;
    E:=EtaleAlgebra(h);
    pi:=PrimitiveElement(E);
    R:=Order([pi,q/pi]);
    try
        oo:=OverOrders(R);
        iso:=IsomorphismClassesAbelianVarieties(R);
        ends:=Setseq({ I[4] : I in iso });
        S:=&meet(ends);
        unique_min_end:=S in ends; // is there a unique minimal end?
        str:=Sprintf("\n\n%o\n",h);
        str cat:=Sprintf("is there a unique minimal end? %o\n",unique_min_end);
        jumps:=not forall{ T : T in ends | forall{ TT : TT in MinimalOverOrders(T) | TT in ends } };
        str cat:=Sprintf("jumps in the lattice of ends? %o\n",jumps);
        pp:=[ P : P in PrimesAbove(p*MaximalOrder(E)) | not SlopeE(P) in {0,1} ];
        cond1:=forall{ P : P in pp | RamificationIndex(P) eq 1 and (a mod InertiaDegree(P) eq 0) };
        cond2:=forall{ P : P in pp | SlopeE(P) in {1/nP,1-1/nP} where nP:=RamificationIndex(P)*InertiaDegree(P)};
        str cat:=Sprintf("cond1,cond2=%o, %o\n",cond1,cond2);
        fprintf file_out,"%o",str;
    catch
        e;
        e`Object;
        e`Position;
        fprintf file_err,"%o = debug me! %o\n",h,e`Object;
    end try;

