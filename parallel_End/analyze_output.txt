/* vim: set syntax=magma : */
/*
*/

// magma script to great the database

    file_out:="~/IsomClassesAbVarFqComEnd/parallel_End/output.txt";
    file_new_out:="~/IsomClassesAbVarFqComEnd/parallel_End/output_lines.txt";
    Pipe("rm " cat file_new_out,"");
    data:=Split(Read(file_out),"\n");
    lines:=[&cat[ data[4*i+j] cat "\t" : j in [1..4] ] : i in [0..(#data div 4)-1] ];
    for l in lines do
        fprintf file_new_out,"%o\n",l;
    end for;


    AttachSpec("~/AlgEt/spec");
    Attach("~/IsomClassesAbVarFqComEnd/PrimesAttributes.m");
    Attach("~/IsomClassesAbVarFqComEnd/DieudonneModules.m");
    Attach("~/IsomClassesAbVarFqComEnd/IsomorphismClasses.m");
    PP<x>:=PolynomialRing(Integers());

    cex_con2:=[ l : l in lines | "minimal end? f" in l and 
                        ("cond1,cond2=true, true" in l or "cond1,cond2=false, true" in l) ];
    cex_con2:=[ eval(Split(l,"=")[1]) : l in cex_con2 ];
    for h in cex_con2 do
        E:=EtaleAlgebra(h);
        g:=Degree(h) div 2;
        q:=Round(ConstantCoefficient(h)^(1/g));
        _,p,a:=IsPrimePower(q);
        pp:=PlacesAboveRationalPrime(E,p); 
        sl:=[ Slope(P) : P in pp ];
        assert exists{s : s in sl | #[ss : ss in sl | ss eq s] gt 1 }; //more than one place with same slope

        sl:=Seqset([ s : s in sl | s ne 1 and s ne 0]);
        sl,h;
        for s in sl do
            pp_s:=[ P : P in pp | Slope(P) eq s ];
            if #pp_s gt 1 then
                s,[ IsConjugateStable(P) : P in pp ];
            end if;
        end for;
    end for;

    for l in lines do
        h:=eval(Split(l,"=")[1]);
        E:=EtaleAlgebra(h);
        g:=Degree(h) div 2;
        q:=Round(ConstantCoefficient(h)^(1/g));
        _,p,a:=IsPrimePower(q);
        pp:=PlacesAboveRationalPrime(E,p); 
        sl:=[ Slope(P) : P in pp ];
        sl:=[ s : s in sl | not s in {0,1,1/2} ];
        if #sl gt 0 then
            sl,h;
        end if;
    end for;

    for l in lines do
        h:=eval(Split(l,"=")[1]);
        E:=EtaleAlgebra(h);
        pi:=PrimitiveElement(E);
        g:=Degree(h) div 2;
        q:=Round(ConstantCoefficient(h)^(1/g));
        _,p,a:=IsPrimePower(q);
        pp:=[ P : P in PlacesAboveRationalPrime(E,p) | not Slope(P) in {0,1} ]; 
        R:=Order([pi,q/pi]);
        oneR:=OneIdeal(R);
        assert #{ oneR meet R!!P : P in pp } eq 1; 
    end for;

    for l in lines do
        h:=eval(Split(l,"=")[1]);
        E:=EtaleAlgebra(h);
        pi:=PrimitiveElement(E);
        g:=Degree(h) div 2;
        q:=Round(ConstantCoefficient(h)^(1/g));
        _,p,a:=IsPrimePower(q);
        //pp:=PlacesAboveRationalPrime(E,p); 
        pp:=[ P : P in PlacesAboveRationalPrime(E,p) | not Slope(P) in {0,1} ]; 
        sl:={ Slope(P) : P in pp };
        if 
            forall{ P : P in pp | Slope(P) in {1/n,1-1/n} where n:=(RamificationIndex(P)*InertiaDegree(P)) } 
            and 
            forall{s : s in sl | #[ P : P in pp | Slope(P) eq s ] eq 1 }
                then
            assert "end? true" in l;
        end if;
    end for;

    lines:=Split(Read(file_new_out));
    for il->l in lines do
        if "end? false" in l and "ends? true" in l and ")(" notin l then
            PP<x>:=PolynomialRing(Integers());
            h:=eval(Split(l,"=")[1]);
            E:=EtaleAlgebra(h);
            pi:=PrimitiveElement(E);
            g:=Degree(h) div 2;
            q:=Round(ConstantCoefficient(h)^(1/g));
            _,p,a:=IsPrimePower(q);
            R:=Order([pi,q/pi]);
            il,#OverOrders(R),#SingularPrimes(R),h;
        end if;
    end for;


    // EXAMPLE 1 : simple
    AttachSpec("~/AlgEt/spec");
    Attach("~/IsomClassesAbVarFqComEnd/PrimesAttributes.m");
    Attach("~/IsomClassesAbVarFqComEnd/DieudonneModules.m");
    Attach("~/IsomClassesAbVarFqComEnd/IsomorphismClasses.m");
    _<x>:=PolynomialRing(Integers());
    h:=x^8 + x^7 + x^6 + 4*x^5 - 4*x^4 + 16*x^3 + 16*x^2 + 64*x + 256;
    E:=EtaleAlgebra(h);
    pi:=PrimitiveElement(E);
    g:=Degree(h) div 2;
    q:=Round(ConstantCoefficient(h)^(1/g));
    _,p,a:=IsPrimePower(q);
    R:=Order([pi,q/pi]);
    O:=MaximalOrder(E);
    oo:=OverOrders(R);
    time DM:=IsomorphismClassesDieudonneModules(R);
    time iso:=IsomorphismClassesAbelianVarieties(R);
    for S in oo do
        invS:=#PicardGroup(S);
        DMS:=#[ D : D in DM | D`DeltaEndomorphismRing eq S];
        isoS:=#[ I : I in iso | I[4] eq S ];
        assert isoS eq DMS*invS;
        Index(O,S),#MinimalOverOrders(S),DMS,invS;
    end for;


    // EXAMPLE 2 : non-simple
    AttachSpec("~/AlgEt/spec");
    Attach("~/IsomClassesAbVarFqComEnd/PrimesAttributes.m");
    Attach("~/IsomClassesAbVarFqComEnd/DieudonneModules.m");
    Attach("~/IsomClassesAbVarFqComEnd/IsomorphismClasses.m");
    _<x>:=PolynomialRing(Integers());
    h:=x^4 + 4*x^2 + 16;
    E:=EtaleAlgebra(h);
    pi:=PrimitiveElement(E);
    g:=Degree(h) div 2;
    q:=Round(ConstantCoefficient(h)^(1/g));
    _,p,a:=IsPrimePower(q);
    R:=Order([pi,q/pi]);
    O:=MaximalOrder(E);
    oo:=OverOrders(R);
    time DM:=IsomorphismClassesDieudonneModules(R);
    time iso:=IsomorphismClassesAbelianVarieties(R);
    for iS->S in oo do
        invS:=#PicardGroup(S);
        DMS:=#[ D : D in DM | D`DeltaEndomorphismRing eq S];
        isoS:=#[ I : I in iso | I[4] eq S ];
        assert isoS eq DMS*invS;
        printf "%o,%o,%o,%o,%o,%o\n",iS,Index(O,S),[ Index(oo,T) : T in MinimalOverOrders(S)],DMS,invS,IsProductOfOrders(S);
    end for;



/*
// isogeny classes when cond1 is true and there is no minimum End
    grep -E 'minimal end\? f' output_lines.txt | grep -E 'cond1,cond2=true'
// isogeny classes when cond2 is true and there is no minimum End
    grep -E 'minimal end\? f' output_lines.txt | grep -E "'cond1,cond2=true, true'|'cond1,cond2=false, true'"
*/


