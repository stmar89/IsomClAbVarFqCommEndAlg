/* vim: set syntax=magma : */
/*

    We check if Delta^-1(WR) is equal to R , locally at (0,1).

*/

    AttachSpec("~/AlgEt/spec");
    Attach("PrimesAttributes.m");
    Attach("DieudonneModules.m");
    Attach("IsomorphismClasses.m");

    //SetVerbose("DieudonneModules",2);
    //SetVerbose("Algorithm_3",2);
    SetAssertions(2);
    SetDebugOnError(true);

    PP<x>:=PolynomialRing(Integers());

    all_weil_poly:=Split(Read("~/IsomClassesAbVarFqComEnd/parallel_End/input.txt"));
    tot:=#all_weil_poly; perc:=0;

    for icc->cc in all_weil_poly do
        if Truncate(icc*100/tot) gt perc then perc+:=1; printf "%o%% ", perc; end if;
        coeff:=eval(cc);
        g:=(#coeff-1) div 2;
        if not IsCoprime(coeff[1],coeff[g+1]) then
            printf ".";
            h:=PP!coeff;
            if IsSquarefree(h) then
                print h;
                q:=Truncate(ConstantCoefficient(h)^(1/g));
                t,p,a:=IsPrimePower(q);
                E:=EtaleAlgebra(h);
                pi:=PrimitiveElement(E);
                R:=Order([pi,q/pi]);
                p,q,a,g,E,pi,places_E,L,OL,PL,normPL,A,pi_A,OA,Delta_map,WR,sigma_A_mod_I,Delta_inverse_ideal:=DieudonneAlgebra(R);
                _,pp,_:=Explode(places_E);
                assert forall{ P : P in pp | Slope(P) notin {0,1} };
                pp:=Setseq({ OneIdeal(R) meet R!!P : P in pp });
                assert #pp eq 1;
                P:=pp[1];
                S:=Order(ZBasis(Delta_inverse_ideal(OneIdeal(WR))));
                test:= R!!OneIdeal(S) eq OneIdeal(R) + R!!S!!P;
                if not test then
                    break icc;
                end if;
            end if;
        end if;
    end for;






/*

*/

























