/* vim: set syntax=magma : */
/*
    TODO
    - Add references to the paper (scan for ADDREF, some might be missing)
    - 'Duality', i.e. the induced complex conjugation on A, allow us to compute only for place with slope <= 1/2.
        Need to implement it.
*/

    AttachSpec("~/AbVarFq/old_AlgAss.spec");
    Attach("~/PolsAbVarFpCanLift/ResRefCond.m");
    AttachSpec("~/AlgEt/spec");
    Attach("~/IsomClassesAbVarFqComEnd/PrimesAttributes.m");
    Attach("~/IsomClassesAbVarFqComEnd/DieudonneModules.m");
    Attach("~/IsomClassesAbVarFqComEnd/IsomorphismClasses.m");

    SetVerbose("DieudonneModules",2);
    SetVerbose("DieudonneModules_L",2);
    SetVerbose("Algorithm_2",1);
    SetVerbose("Algorithm_3",2);
    SetVerbose("Delta_scaling",2);
    //SetVerbose("nice_unif",2);
    SetVerbose("sigma",2);
    SetVerbose("IsomAbVar",2);
    //SetVerbose("ResidueRingUnits",2);
    SetAssertions(2);
    SetDebugOnError(true);

    overorders_maximal_at_ss:=function(R)
    // R = Z[F,V] of an almost ord isogney clas
        K:=Algebra(R);
        q:=Truncate(ConstantCoefficient(DefiningPolynomial(K))^(2/Dimension(K)));
        pi:=PrimitiveElement(K);
        pp:=[ P : P in PrimesAbove(q*R) | pi in P and q/pi in P];
        assert #pp eq 1;
        P:=pp[1];
        OO:=MaximalOrder(K);
        OO1:=R!!OneIdeal(OO);
        OOP:=OO!!P;
        ROP:=R!!(OOP);
        oo:=OverOrders(R);
        output:=[ S : S in oo | OO1 eq ( (R!!OneIdeal(S))+ROP ) ];

        OOP:=PrimesAbove(OOP);
        assert #OOP eq 1;
        OOP:=OOP[1];
        ram:=RamificationIndex(OOP);
        assert ram in {1,2};
        return output,ram;
    end function;

    PP<x>:=PolynomialRing(Integers());

    // to be debugged
    //h:=x^4 - 4*x^3 + 8*x^2 - 32*x + 64; // It seems that WKICM(WR_01) is very big
    //h:=x^4+64;// Terminate. Why? It seems that WKICM(WR_01) is the issue. Maybe the recursion?
    //h:=x^4 + 4*x^3 + 16*x^2 + 32*x + 64; // too slow (funnily, its twist is not that slow)
    //h:=x^6 - x^5 + 4*x^3 - 4*x + 8; // m0 seems to vary a lot: often m0=2, sometimes m0=32
    h:=x^8 - 6*x^7 + 18*x^6 - 36*x^5 + 68*x^4 - 144*x^3 + 288*x^2 - 384*x + 256; // FIXED ON 20240819 BUG. sl 1/4,3/4. Quite fast.
    //h:=PP![ 256, 64, 16, 16, -4, 4, 1, 1, 1 ];
    //h:=x^4 + 2*x^3 + 4*x^2 + 8*x + 16; //used while working on optimizing Delta-scaling
    h:=x^4 + 4*x^2 + 16; // for timings
    h;


    coeff:=Coefficients(h);
    g:=Degree(h) div 2;
    q:=Truncate(ConstantCoefficient(h)^(1/g));
    printf "%50o = ",h;
    t,p,a:=IsPrimePower(q);
    assert t; delete t;
    E:=EtaleAlgebra(h);
    pi:=PrimitiveElement(E);
    R:=Order([pi,q/pi]);
    t0:=Cputime();
    iso:=IsomorphismClassesAbelianVarieties(R);
    t1:=Cputime(t0);
    num_isom:=#iso;
    ends:=Setseq({ I[4] : I in iso });
    S:=&meet(ends);
    unique_min_end:=S in ends; // is there a unique minimal end?
    str:=Sprintf("min end? %o ",unique_min_end select "Y" else "N");
    jumps:=not forall{ T : T in ends | forall{ TT : TT in MinimalOverOrders(T) | TT in ends } };
    str cat:=Sprintf("jumps? %o ",jumps select "Y" else "N");
    printf "%o", str;
    num_test:=0;
    if IsCoprime(coeff[g+1],q) then 
        num_test:=#ICM(R);
        descr:="ord"; 
    elif p eq q then
        num_test:=#ICM(R);
        descr:="cs"; 
    else
        I:=IsogenyClass(h);
        g:=Dimension(I);
        is_almost_ordinary:=pRank(I) eq g-1;
        if is_almost_ordinary then
            oo_max_at_ss,ram:=overorders_maximal_at_ss(R);
            icm:=&+[ #ICM_bar(S) : S in oo_max_at_ss ];
            if ram eq 2 then //ramified
                num_test:=icm;
                descr:="alm ord - ram";
            else
                num_test:=2*icm;
                descr:="alm ord - inert";
            end if;
        else
            descr:="can't compare with previous results";
        end if;
    end if;
    if num_test gt 0 then
        if not num_isom eq num_test then
            "failure <-------------------",t1,descr,"computed",num_isom,"expected",num_test;
        else
            "good",t1,descr;
        end if;
    else
        "can't compare to previous data",t1;
    end if;


    O:=MaximalOrder(Algebra(R));
    [ Index(O,S) : S in OverOrders(R) ];
    [ Index(O,S) : S in ends ];
    pp:=[ P : P in PlacesAboveRationalPrime(E,p) | not Slope(P) in {0,1} ];
    cond1:=forall{ P : P in pp | RamificationIndex(P) eq 1 and (a mod InertiaDegree(P) eq 0) };
    cond2:=forall{ P : P in pp | Slope(P) in {1/nP,1-1/nP} where nP:=RamificationIndex(P)*InertiaDegree(P)};
    cond1; cond2;

    p,q,a,g,E,pi,places_E,L,OL,PL,normPL,A,pi_A,OA,Delta_map,WR,sigma_A_mod_I,Delta_inverse_ideal:=DieudonneAlgebra(R);

    oo:=OverOrders(R);
    oo_zb:=[ ZBasis(S) : S in oo ];
    oo_Delta:=[ [ Delta_map(z) : z in ZBasis(S) ] : S in oo ];

    for I in iso do
        tt,dm,inv,endo:=Explode(I);
        for iS in [1..#oo_Delta] do
             if (
                 forall{ x : x in oo_Delta[iS], g in ZBasis(dm) | x*g in dm } //test on dm
                 and
                 forall{ x : x in oo_zb[iS], g in ZBasis(tt) | x*g in tt } //test on tt
                 and
                 forall{ x : x in oo_zb[iS], g in ZBasis(inv) | x*g in inv } //test on inv
                 ) then
                 assert (oo[iS] subset endo);
             end if;
        end for;
        assert Order(inv) eq endo;
    end for;



