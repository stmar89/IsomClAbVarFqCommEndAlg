/* vim: set syntax=magma : */
/*
*/

    AttachSpec("~/AbVarFq/packages.spec");


    AttachSpec("~/AlgEt/spec");
    Attach("PrimesAttributes.m");
    Attach("DieudonneModules.m");
    Attach("IsomorphismClasses.m");

    //SetVerbose("DieudonneModules",2);
    //SetVerbose("Algorithm_3",2);
    SetAssertions(2);
    SetDebugOnError(true);

    PP<x>:=PolynomialRing(Integers());

    to_be_excluded:=[
        x^4 - 2*x^3 + 4*x^2 - 8*x + 16, //too slow; sometimes a relatively fast Segmentation Fault. Investigate!
        x^4 + 2*x^3 + 4*x^2 + 8*x + 16, //too slow
        x^4+64// Terminate. Why?
        ];

    all_weil_poly:=Split(Read("weil_poly_all.txt"));

    file_out:="questions_End_output.txt";

    for cc in all_weil_poly do
        coeff:=eval(cc);
        h:=PP!coeff;
        g:=Degree(h) div 2;
        if g gt 1 and IsSquarefree(h) and not h in to_be_excluded then
            q:=Truncate(ConstantCoefficient(h)^(1/g));
            t,p,a:=IsPrimePower(q);
            if q le 11
                and a gt 1
                and pRank(IsogenyClass(h)) le g-1
                        then
                printf "\n\n%o\n",h;
                fprintf file_out,"\n\n%o\n",h;
                assert t; delete t;
                E:=EtaleAlgebra(h);
                pi:=PrimitiveElement(E);
                R:=Order([pi,q/pi]);
                try
                    t0:=Cputime();
                    oo:=OverOrders(R);
                    iso:=IsomorphismClassesAbelianVarieties(R);
                    ends:=Setseq({ I[4] : I in iso });
                    S:=&meet(ends);
                    unique_min_end:=S in ends; // is there a unique minimal end?
                    printf "is there a unique minimal end? %o\n",unique_min_end;
                    fprintf file_out,"is there a unique minimal end? %o\n",unique_min_end;
                    jumps:=not forall{ T : T in ends | forall{ TT : TT in MinimalOverOrders(T) | TT in ends } };
                    printf "jumps in the lattice of ends? %o\n",jumps;
                    fprintf file_out,"jumps in the lattice of ends? %o\n",jumps;
                    t1:=Cputime(t0);
                    printf "\n";
                catch
                    e;
                    e`Object;
                    e`Position;
                    "error detected";
                    //break cc;
                end try;
            end if;
        end if;
    end for;

    PP<x>:=PolynomialRing(Integers());
    for cc in ll do
        h:=PP!cc;
        g:=Degree(h) div 2;
        E:=EtaleAlgebra(h);
        q:=Truncate(ConstantCoefficient(h)^(2/Degree(h)));
        _,p,a:=IsPrimePower(q);
        pp:=[ P : P in PrimesAbove(p*MaximalOrder(E)) | not SlopeE(P) in {0,1} ];
        cond1:=forall{ P : P in pp | RamificationIndex(P) eq 1 and (a mod InertiaDegree(P) eq 0) };
        cond2:=forall{ P : P in pp | SlopeE(P) in {1/nP,1-1/nP} where nP:=RamificationIndex(P)*InertiaDegree(P)};
        cond1,cond2,h;
        if not cond1 then assert a gt 2; end if;
        if not cond2 then assert g gt 2; end if;
    end for;



/*

    AttachSpec("~/AlgEt/spec");
    Attach("DieudonneModules.m");
    Attach("IsomorphismClasses.m");

    SetVerbose("DieudonneModules",2);

    PP<x>:=PolynomialRing(Integers());
    //h:=( 16 - 4*x + x^2 )*( 256 - 112*x + 40*x^2 - 7*x^3 + x^4 ); // 3.16.al_dg_aou, Dimension(A) = 48
    //h:=( 4 - 2*x + x^2 )*( 16 - 4*x + 4 *x^2 - x^3 + x^4); // 3.4.ad_k_aq, Dimension(A) = 12
    //h:=( 16 - 4*x + 4 *x^2 - x^3 + x^4); // Dimension(A) = 12
    //h:=x^2 - 2*x + 4;
    h:=x^4 - 2*x^3 + 4*x^2 - 8*x + 16; //slow
    h:=x^4 + x^3 - 2*x^2 + 4*x + 16;

    g:=Degree(h) div 2;
    q:=Truncate(ConstantCoefficient(h)^(1/g));
    t,p,a:=IsPrimePower(q);
    assert t; delete t;

    E:=EtaleAlgebra(h);
    pi:=PrimitiveElement(E);
    R:=Order([pi,q/pi]);

    time IsomorphismClassesTateModules(R);
    time IsomorphismClassesDieudonneModules(R);
    time #IsomorphismClassesAbelianVarieties(R);
*/

























