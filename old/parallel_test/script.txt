/* vim: set syntax=magma : */
/*
    rm ~/IsomClassesAbVarFqComEnd/parallel_test/output.txt
    rm ~/IsomClassesAbVarFqComEnd/parallel_test/errors.txt
    rm ~/IsomClassesAbVarFqComEnd/parallel_test/joblog
    parallel -j 10 --timeout 36000 --resume --joblog ~/IsomClassesAbVarFqComEnd/parallel_test/joblog -a ~/IsomClassesAbVarFqComEnd/parallel_test/input.txt magma -b cc:={} ~/IsomClassesAbVarFqComEnd/parallel_test/script.txt 
*/

    file_out:="~/IsomClassesAbVarFqComEnd/parallel_test/output.txt";
    file_err:="~/IsomClassesAbVarFqComEnd/parallel_test/errors.txt";

    AttachSpec("~/AbVarFq/packages.spec");
    Attach("~/PolsAbVarFpCanLift/ResRefCond.m");

    AttachSpec("~/AlgEt/spec");
    Attach("~/IsomClassesAbVarFqComEnd/PrimesAttributes.m");
    Attach("~/IsomClassesAbVarFqComEnd/DieudonneModules.m");
    Attach("~/IsomClassesAbVarFqComEnd/IsomorphismClasses.m");

    //SetVerbose("DieudonneModules",2);
    SetAssertions(2);
    SetDebugOnError(false);
    SetClassGroupBounds("GRH");

    overorders_maximal_at_ss:=function(R)
    // R = Z[F,V] of an almost ord isogney clas
        K:=Algebra(R);
        q:=Truncate(ConstantCoefficient(DefiningPolynomial(K))^(2/Dimension(K)));
        pi:=PrimitiveElement(K);
        pp:=[ P : P in PrimesAbove(q*R) | pi in P and q/pi in P];
        assert #pp eq 1;
        P:=pp[1];
        OO:=MaximalOrder(K);
        OO1:=R!!OneIdeal(OO);
        OOP:=OO!!P;
        ROP:=R!!(OOP);
        oo:=OverOrders(R);
        output:=[ S : S in oo | OO1 eq ( (R!!OneIdeal(S))+ROP ) ];

        OOP:=PrimesAbove(OOP);
        assert #OOP eq 1;
        OOP:=OOP[1];
        ram:=RamificationIndex(OOP);
        assert ram in {1,2};
        return output,ram;
    end function;

    PP<x>:=PolynomialRing(Integers());

    coeff:=eval(cc);
    h:=PP!coeff;
    if IsSquarefree(h) then
        g:=Degree(h) div 2;
        q:=Truncate(ConstantCoefficient(h)^(1/g));
        t,p,a:=IsPrimePower(q);
        assert t; delete t;
        E:=EtaleAlgebra(h);
        pi:=PrimitiveElement(E);
        R:=Order([pi,q/pi]);
        try
            t0:=Cputime();
            num_isom:=#IsomorphismClassesAbelianVarieties(R);
            t1:=Cputime(t0);
            num_test:=0;
            if IsCoprime(coeff[g+1],q) then 
                num_test:=#ICM(R);
                descr:="ord"; 
            elif p eq q then
                num_test:=#ICM(R);
                descr:="cs"; 
            else
                I:=IsogenyClass(h);
                g:=Dimension(I);
                is_almost_ordinary:=pRank(I) eq g-1;
                if is_almost_ordinary then
                    oo_max_at_ss,ram:=overorders_maximal_at_ss(R);
                    icm:=&+[ #ICM_bar(S) : S in oo_max_at_ss ];
                    if ram eq 2 then //ramified
                        num_test:=icm;
                        descr:="alm ord - ram";
                    else
                        num_test:=2*icm;
                        descr:="alm ord - inert";
                    end if;
                end if;
            end if;
            if num_test gt 0 then
                if not num_isom eq num_test then
                    fprintf file_err,"%50o = failure <------------------- %o %o computed %o expected %o \n",h,t1,descr,num_isom,num_test;
                else
                    fprintf file_out,"%50o = good %o %o\n",h,t1,descr;
                end if;
            else
                fprintf file_out,"%50o = can't compare to previous data %o\n",h,t1;
            end if;
            printf "%50o = %o\n",h,t1;
        catch
            e;
            e`Object;
            e`Position;
            fprintf file_err,"%50o = debug me! %o\n",h,e`Object;
            //break cc;
        end try;
    end if;

