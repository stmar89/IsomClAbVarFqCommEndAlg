/* vim: set syntax=magma : */
/*
    In this file, we collect a series of tests that run on the output of parallel_storing.
    For each isogeny class I determined by a squarefree Weil polynomial, with R=Z[F,V],
    we assert the following: 
    - if I is ordinary: #I = #ICM(R)
    - if over Fp, #I = #ICM(R)
    - if almost ordinary, #I = #ICM(S) or #I = 2*#ICM(S), depending whether the ss place P is ramified or inert, 
                          with S the smallest overorder of R which is maximal at P.
    - if I is not simple, find all decompositions I1 x I2, compute N=#I1 x #I2 by either loading previously 
                          computed data, or using the rules above, and check if the subset I' of I that respect 
                          the decomposition I1 x I2 has satisfies #I'= N. 
                          [ such decompositions are 'maximal' so they will give the most info, by recursion ].
                          [ to compute the decompositions: for each idempotent e, compute the orders that 
                          contain e and 1-e, and the minimal polynomials of pi*e and pi*(1-e) ]
    - compute the subset of I that has maximal real multiplication and check its size against 'Bhatnagar, Yu Fu'.
    - check the number of iso classes in I with maximal End against Waterhouse formula.
*/

    AttachSpec("~/AbVarFq/spec");


    AttachSpec("~/AlgEt/spec");
    Attach("PrimesAttributes.m");
    Attach("DieudonneModules.m");
    Attach("IsomorphismClasses.m");

    overorders_maximal_at_ss:=function(R)
    // R = Z[F,V] of an almost ord isogney clas
        K:=Algebra(R);
        q:=Truncate(ConstantCoefficient(DefiningPolynomial(K))^(2/Dimension(K)));
        pi:=PrimitiveElement(K);
        pp:=[ P : P in PrimesAbove(q*R) | pi in P and q/pi in P];
        assert #pp eq 1;
        P:=pp[1];
        OO:=MaximalOrder(K);
        OO1:=R!!OneIdeal(OO);
        OOP:=OO!!P;
        ROP:=R!!(OOP);
        oo:=OverOrders(R);
        output:=[ S : S in oo | OO1 eq ( (R!!OneIdeal(S))+ROP ) ];

        OOP:=PrimesAbove(OOP);
        assert #OOP eq 1;
        OOP:=OOP[1];
        ram:=RamificationIndex(OOP);
        assert ram in {1,2};
        return output,ram;
    end function;

    SetAssertions(2);
    SetDebugOnError(true);

    PP<x>:=PolynomialRing(Integers());

    test_ord_cs:=function(R,iso)
        icm:=ICM(R);
        oo:=OverOrders(R);
        output:=true;
        for S in oo do
            output &and:=#[ I : I in icm | MultiplicatorRing(I) eq S ] eq #[ X : X in iso | X[4] eq S];
        end for;
        return output;
    end function;

    test_alm_ord:=function(R,iso)
        oo:=FindOverOrders(R);
        oo_max_at_ss,ram:=overorders_maximal_at_ss(R);
        S:=&meet(oo_max_at_ss);
        icm:=ICM(S);
        output:=true;
        for S in oo do
            iso_S:=#[ X : X in iso | X[4] eq S ];
            icm_S:=#[ I : I in icm | MultiplicatorRing(I) eq S ];
            if ram eq 2 then //ramified
                output &and:=iso_S eq icm_S
                descr:="ram";
            else //inert
                output &and:=iso_S eq 2*icm_S
                descr:="inert";
            end if;
        end for;
        return output,descr;
    end function;

    fld:="~/IsomClassesAbVarFqComEnd/parallel_storing/output/";
    input_ls:=Pipe("ls " cat fld,"");
    for file in input_ls do
        str:=Read(fld cat file);
        iso:=load_isom_classes(str);
        R:=Order(iso[1,1]);
        E:=Algebra(R);
        h:=DefiningPolynomial(E);
        assert IsSquarefree(h);
        q:=Round(ConstantCoefficient(h)^(2/Degree(h)));
        t,p,a:=IsPrimePower(q); assert t;
        if a eq 1 then
            // CS case
            test_size_ends:=test_ord_cs(R,iso);
            descr:="Fp";
        else
            prank:=pRank(IsogenyClass(h));
            g:=Degree(h) div 2;
            if prank eq g then
                // ord case
                testi_size_ends:=test_ord_cs(R,iso);
                descr:="ord";
            elif prank eq g-1 then
                testi_size_ends,descr:=test_alm_ord(R,iso);
                descr:="alm ord " cat descr;
            end if; 
        end if;

        // maximal totally real part
        Ep:=

    end for;






/*

    AttachSpec("~/AlgEt/spec");
    Attach("DieudonneModules.m");
    Attach("IsomorphismClasses.m");

    SetVerbose("DieudonneModules",2);

    PP<x>:=PolynomialRing(Integers());
    //h:=( 16 - 4*x + x^2 )*( 256 - 112*x + 40*x^2 - 7*x^3 + x^4 ); // 3.16.al_dg_aou, Dimension(A) = 48
    //h:=( 4 - 2*x + x^2 )*( 16 - 4*x + 4 *x^2 - x^3 + x^4); // 3.4.ad_k_aq, Dimension(A) = 12
    //h:=( 16 - 4*x + 4 *x^2 - x^3 + x^4); // Dimension(A) = 12
    //h:=x^2 - 2*x + 4;
    h:=x^4 - 2*x^3 + 4*x^2 - 8*x + 16; //slow
    h:=x^4 + x^3 - 2*x^2 + 4*x + 16;

    g:=Degree(h) div 2;
    q:=Truncate(ConstantCoefficient(h)^(1/g));
    t,p,a:=IsPrimePower(q);
    assert t; delete t;

    E:=EtaleAlgebra(h);
    pi:=PrimitiveElement(E);
    R:=Order([pi,q/pi]);

    time IsomorphismClassesTateModules(R);
    time IsomorphismClassesDieudonneModules(R);
    time #IsomorphismClassesAbelianVarieties(R);
*/

























